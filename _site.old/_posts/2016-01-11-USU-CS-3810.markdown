---
layout: post
title: USU - CS 3810 - In Class Notes
category: CS3810
---

# Computer Systems Organization and Architecture

Bryan Willis
bryanwillisphd@gmail.com

Started off covering the syllabus and housekeeping notes

# Syllabus

Everything's on Canvas (including the syllabus, which you can find [here](https://usu.instructure.com/courses/391777/files/?preview=59666251)

### Things to note: 
 
- __Make sure to attend class__
- Get in touch via the email above.
- exams will be 70% of everall grade
- Homework is really just there to prepare for exams
- Grading will be done by a TA. If he screws up, email the teacher
- No extra credit (sad day)
- Late policy - If you don't submit it by the due date, sucks to be you...
- Only 3 exams, don't believe hte syllabus
- They'll be on paper in class - don't believe the syllabus...

### Class Topics

|Objective|Level of Familiarity|Evaluation Method|
|---|---|---|
|Memory Hierarchy|Familiarity|Assignments, exams|
|Virtual Memory|Master|Assignments Exams
|Storage and I/O topics|Mastery|Assignments Exams
|Multicore and Processors|Familiarity|Assignments Exams
|Clusters|Mastery|Assignments Exams
|GPU Systems|familiarity|Assignments Exams

### Class overview
|Overview|
|---|
|jave/C|
|Assembler|
|Mahine Language|
|1010011001010 (Binary)|
|PC Components|

- __Clock cycle__ - has an oscillator that links the processor to pull in instructions.
- __Registers__ - where we store and access data (RAM)
- __MIPS Assembly Language__ - (not "millions of instructions per second")
- __pipelining__ - Use the output of one program as the input of another
- __parralelism__
- __hierarchy optimization__

### Example from work

use a PCI card to pull analog data with digital sampling

Basically, you need everything to be faster to make the whole computer faster. You can't just have fast processor, you also need fast busses.

### Abstractions

Normally, you'll write a program in c++/Java/C# (or whatever). This is an abstraction from what's actually happening, because, in the end, it's all just binary running through switches. However, you can encounter bugs when your abstract code gets compiled down to assembly.

# Getting into the book

- reading assignment for this week - 1.8
- page 11 talks about the ideas in computer architecture
- make sure to look at the blue highlited points

