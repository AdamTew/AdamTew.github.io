<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adam Tew</title>
    <description>Adam Tew
</description>
    <link>http://adamtew.com//</link>
    <atom:link href="http://adamtew.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 07 Jan 2016 21:28:26 -0700</pubDate>
    <lastBuildDate>Thu, 07 Jan 2016 21:28:26 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>How to Big O</title>
        <description>&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Big O is a way to reason about the complexity of algorithms in computer science. There are many other methods, but big O is the most common that I’ve seen. Big O observes the theoretical limits of a given algorithm and generally ignores constants (because they’re generally not relevant in the big picture)&lt;/p&gt;

&lt;h2 id=&quot;complexities&quot;&gt;Complexities&lt;/h2&gt;

&lt;p&gt;These are The basic run time complexities you’ll see with big O:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(n)&lt;/script&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Big O&lt;/th&gt;
      &lt;th&gt;Complexity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;Constant&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(logn)&lt;/td&gt;
      &lt;td&gt;slightly less than doubles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;doubles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(nlogn)&lt;/td&gt;
      &lt;td&gt;slightly more than doubles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n^2)&lt;/td&gt;
      &lt;td&gt;quadruples&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n^n)&lt;/td&gt;
      &lt;td&gt;Something really bad&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n!)&lt;/td&gt;
      &lt;td&gt;Something even worse&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each one is a theoretical limit of how long an algorithm will take to complete.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Take a traditional &lt;code&gt;for&lt;/code&gt; loop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
for(int i = 0; i &amp;lt; n; i++) {
  cout &amp;lt;&amp;lt; &quot;you&#39;ve reached &quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loop will iterate &lt;code&gt;n&lt;/code&gt; times, which is directly correlated to the size of the data set it’s analyzing. The constant &lt;code&gt;cout &amp;lt;&amp;lt; &quot;you&#39;ve reached &quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&lt;/code&gt; is less important the larger the data set. Because big O is a measure of the theoretical limit, the constant is ignored entirely, and the complexity we are concerned with becomes O(n) - which is read “order n”.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let’s observe a nested &lt;code&gt;for&lt;/code&gt; loop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
for (int i = 0; i &amp;lt; n; i++) {
  for (int j = 0; j &amp;lt; n; j++) {
    cout &amp;lt;&amp;lt; &quot;You&#39;ve reached &quot; &amp;lt;&amp;lt; (i + j) &amp;lt;&amp;lt; endl;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we see that a given data set will be iterated &lt;code&gt;n&lt;/code&gt; times for every item in the data set. This gives us a complexity of O(n^2), which, as you can imagine, is &lt;strong&gt;far worse&lt;/strong&gt; than the previous O(n) example and should be avoided unless absolutely necessary.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-recursion&quot;&gt;Analyzing Recursion&lt;/h2&gt;

&lt;p&gt;Big O gives us some really helpful insights on recursion. One big help is this theorem&lt;/p&gt;

&lt;p&gt;Assume T(n)=aT(n/b)+O(n^k) is the time for the function.
if a &amp;gt; b ^ k, the complexity is O(n^(log(ba))
if a = b ^ k, the complexity is O((n^k) logn)
if a &amp;lt; b ^ k, the complexity is O(n ^ k)&lt;/p&gt;

&lt;p&gt;Some rules to define are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a&lt;/code&gt; is the number of recursive calls we make within a function&lt;br /&gt;
&lt;code&gt;b&lt;/code&gt; is the number of pieces we divide the problem into&lt;br /&gt;
&lt;code&gt;k&lt;/code&gt; is the power of n work we do inside each call&lt;/p&gt;

&lt;p&gt;So, in lay mans terms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
void readCount(int count) 
{
  if(count &amp;lt;= 0)return;
	
  // the amount of work we did never made it to n, so k is 0
  cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;			

  // we make one recursive call, so a = 1
  // divides the work by 2, so b = 2
  return readCount(count / 2); 
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the above example we end up with&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a = 1&lt;/li&gt;
  &lt;li&gt;b = 2&lt;/li&gt;
  &lt;li&gt;k = 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;1 = 2^0 = O((n^0) logn)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So the complexity of our recursive call comes out to be &lt;code&gt;O(logn)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;another-example&quot;&gt;Another example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
void readStars(int stars)
{
  if(stars &amp;lt;= 0) return;
	
  for(int i = 0; i &amp;lt; stars; i++) count &amp;lt;&amp;lt; &quot; * &quot;; // k = 1
	
  return readStars(stars / 2) // a = 1, b = 2
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;a = 1&lt;/li&gt;
  &lt;li&gt;b = 2&lt;/li&gt;
  &lt;li&gt;k = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;1 &amp;lt; 2^1 = O(n^1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives us a complexity of &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;therefore&quot;&gt;Therefore&lt;/h2&gt;

&lt;p&gt;We can see that simple changes to our code can dramatically affect the run-time complexity. So it makes sense to be mindful of where we put loops, how often we iterate entire datasets, and especially how much we process during any recursion.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/04/How%20To%20Big(O).html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/04/How%20To%20Big(O).html</guid>
        
        
      </item>
    
      <item>
        <title>Love You Grandma</title>
        <description>&lt;p&gt;My grandma, Afton Tew, passed away last week - &lt;a href=&quot;http://www.legacy.com/obituaries/hjnews/obituary.aspx?n=afton-tew&amp;amp;pid=177092980&amp;amp;fhid=6864&quot;&gt;Sunday Dec. 27 2015&lt;/a&gt; after 86 years of tremendous influence. She was a wonderful person that helped so many people.&lt;/p&gt;

&lt;p&gt;There was a wonderful service held in her honor. Many showed up to pay tribute. Her children spoke and sang songs. Grandchildren from across the country were there. It was, all-in-all, a wonderful service. Exactly how grandma would have liked it to be.&lt;/p&gt;

&lt;p&gt;I loved Afton Tew.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://adamtew.com/assets/images/afton.jpg&quot; alt=&quot;afton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nearly ten years ago, when I was a teenager, I had the opportunity to live with Grandma. Things were difficult at my home with parents and school, so I left and went to my grandma’s house. While there, she made it a point to help me in any way that she could. She found out foods I liked, would drive me to classes, tried to help me make friends, and helped me learn to play the piano.&lt;/p&gt;

&lt;p&gt;In later years, I didn’t have work, but she employed me to do yard work for her. This helped pay for my school until I got a job elsewhere.&lt;/p&gt;

&lt;p&gt;After getting married, my wife and I had a reception at her house and later lived in her basement apartment. We would often come up and talk with Grandma, help with her computer-related woes, rake leaves, shovel snow, and mow the lawn. We even had our first child while living there.&lt;/p&gt;

&lt;p&gt;Life won’t be the same without Grandma, but after decades without her husband, years of physical struggle and living alone, I know she’s in a better place.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/03/Love-you-grandma.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/03/Love-you-grandma.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Sublime</title>
        <description>&lt;h1 id=&quot;how-to-sublime&quot;&gt;How to sublime&lt;/h1&gt;

&lt;p&gt;Sublime is awesome. As a text editor. When trying to debug code, I generally tend to use an IDE with break points (anything IntelliJ, CLion, PyCharm, etc). However, when it comes to just editing text, I haven’t found anything that can rival Sublime (note, I haven’t tried &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; yet, but it feels like it was built with a lot of the same ideas in mind).&lt;/p&gt;

&lt;h1 id=&quot;multiple-cursors&quot;&gt;1 Multiple Cursors&lt;/h1&gt;

&lt;p&gt;I cannot express how useful multiple cursors is. When altering multiple instances of the same (or similar) content, this comes in quite handy. just highlight some text and hit &lt;strong&gt;⌘ + d&lt;/strong&gt;. Sublime will select the next instance of the given text with a new cursor. This can be repeated until there are no instances on the page. Often times I’ll use this approach as a quick search for additional references to a given variable, changing things like single quotes &lt;code&gt;&#39;&lt;/code&gt; to double quotes &lt;code&gt;&quot;&lt;/code&gt;, parethesis &lt;code&gt;(&lt;/code&gt; to braces &lt;code&gt;{&lt;/code&gt;, or underscores &lt;code&gt;_&lt;/code&gt; ro dashes &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another method is with searching. You can toggle the search bar (⌘ + f), type in a search term, and hit find all (option + r). This will instantly grab all of the instances of a given term and create cursors. I generally use this when I want to delete every instance of a term, or modify it slightly.&lt;/p&gt;

&lt;p&gt;The third method, that I’ve started using more recently is with ⌘ + shift + l. It will take all of the highlighted text and break every line into its own cursor. I generally use this when I don’t have a common reference point. Say you want to put tags around 20 different pieces of text. Because text is very similar, there’s not really anything to ⌘ + d or search. So, I’ll just highlight the whole block of variables, hit ⌘ + shift + l, and away we go.&lt;/p&gt;

&lt;p&gt;Pretty nifty.&lt;/p&gt;

&lt;h1 id=&quot;vim-integration&quot;&gt;2 vim integration&lt;/h1&gt;

&lt;p&gt;Even though PyCharm, CLion, and Visual Studio have their perks, I’ve never found anything with as good vim integration as sublime. All you need to do to enable it is change &lt;code&gt;vintage mode&lt;/code&gt; in the user preference to enabled, and then away you go.&lt;/p&gt;

&lt;p&gt;Once vintage mode is enabled, you get a command mode (entered via &lt;code&gt;esc&lt;/code&gt;) where you can run most of the traditional vi(m) commands&lt;/p&gt;

&lt;h3 id=&quot;basic-navigation&quot;&gt;basic navigation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;h&lt;/code&gt; &lt;code&gt;j&lt;/code&gt; &lt;code&gt;k&lt;/code&gt; &lt;code&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;insertion&quot;&gt;Insertion&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;a&lt;/code&gt; and &lt;code&gt;⇧ a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i&lt;/code&gt; and &lt;code&gt;⇧i&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇧ o&lt;/code&gt; and &lt;code&gt;o&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jumping-around-the-page&quot;&gt;Jumping around the page&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;⇧ h&lt;/code&gt; &lt;code&gt;⇧ m&lt;/code&gt; &lt;code&gt;⇧ l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;advanced-navigation&quot;&gt;advanced navigation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;e&lt;/code&gt; &lt;code&gt;f&lt;/code&gt; &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$&lt;/code&gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;highlighting--copying&quot;&gt;highlighting / copying&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;v&lt;/code&gt; &lt;code&gt;y&lt;/code&gt; &lt;code&gt;d&lt;/code&gt; &lt;code&gt;p&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;plugins-for-everything&quot;&gt;3 plugins for everything&lt;/h1&gt;

&lt;p&gt;Need syntax highlighting for… Any language? Gotcha covered - &lt;code&gt;⇧⌘p&lt;/code&gt; brings up a list of things you can do.&lt;/p&gt;

&lt;h1 id=&quot;projects&quot;&gt;4 Projects&lt;/h1&gt;

&lt;p&gt;Project are extremely useful if you have, well, lots of projects that you’re working on. I do a lot of contract work / school / personal fun projects, so it’s good for me.&lt;/p&gt;

&lt;p&gt;The way it works:&lt;/p&gt;

&lt;p&gt;Project &amp;gt; add folder to project&lt;/p&gt;

&lt;h1 id=&quot;p-ctrl--p&quot;&gt;5 ⌘ + p (ctrl + p)&lt;/h1&gt;

&lt;p&gt;This one is at the bottom of the list because I don’t use it that often. I know lots of people that do, but I have this weird mental thing about knowing where every file is (I tend to use it a lot more on bigger projects where I don’t want to navigate through piles of directories)&lt;/p&gt;

</description>
        <pubDate>Sat, 02 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/02/How-to-Sublime.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/02/How-to-Sublime.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Markdown</title>
        <description>&lt;h2 id=&quot;hr&quot;&gt;&lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;header&quot;&gt;Header&lt;/h2&gt;

&lt;h6 id=&quot;header-6&quot;&gt;header 6&lt;/h6&gt;

&lt;h5 id=&quot;header-5&quot;&gt;header 5&lt;/h5&gt;

&lt;h4 id=&quot;header-4&quot;&gt;header 4&lt;/h4&gt;

&lt;h3 id=&quot;header-3&quot;&gt;header 3&lt;/h3&gt;

&lt;h2 id=&quot;header-2&quot;&gt;header 2&lt;/h2&gt;

&lt;h1 id=&quot;header-1&quot;&gt;header 1&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;# header 1
## header 2
### header 3
#### header 4
##### header 5
###### header 6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;bulleted&lt;/li&gt;
  &lt;li&gt;list
    &lt;ul&gt;
      &lt;li&gt;with&lt;/li&gt;
      &lt;li&gt;indentation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;or not&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;- bulleted
- list
    + with 
    + indentation
- or not&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th&gt;Subtopic&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Topic&lt;/td&gt;
      &lt;td&gt;Subtopic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Subtopic&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;|Topic|Subtopic|
|---|---|
|Topic  |Subtopic|
|       |Subtopic|&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 02 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/02/How-to-Markdown.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/02/How-to-Markdown.html</guid>
        
        
      </item>
    
  </channel>
</rss>
