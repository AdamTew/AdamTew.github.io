<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adam Tew</title>
    <description>Adam Tew
</description>
    <link>http://adamtew.com//</link>
    <atom:link href="http://adamtew.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 13 Jan 2016 10:19:52 -0700</pubDate>
    <lastBuildDate>Wed, 13 Jan 2016 10:19:52 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>USU - CHEM 1210 - In Class Notes</title>
        <description>
</description>
        <pubDate>Wed, 13 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/13/chem-notes.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/13/chem-notes.html</guid>
        
        
      </item>
    
      <item>
        <title>USU - CS 3810 - In Class Notes</title>
        <description>&lt;h1 id=&quot;computer-systems-organization-and-architecture&quot;&gt;Computer Systems Organization and Architecture&lt;/h1&gt;

&lt;p&gt;Bryan Willis
bryanwillisphd@gmail.com&lt;/p&gt;

&lt;p&gt;Started off covering the syllabus and housekeeping notes&lt;/p&gt;

&lt;h1 id=&quot;syllabus&quot;&gt;Syllabus&lt;/h1&gt;

&lt;p&gt;Everything’s on Canvas (including the syllabus, which you can find &lt;a href=&quot;https://usu.instructure.com/courses/391777/files/?preview=59666251&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;things-to-note&quot;&gt;Things to note:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Make sure to attend class&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Get in touch via the email above.&lt;/li&gt;
  &lt;li&gt;exams will be 70% of everall grade&lt;/li&gt;
  &lt;li&gt;Homework is really just there to prepare for exams&lt;/li&gt;
  &lt;li&gt;Grading will be done by a TA. If he screws up, email the teacher&lt;/li&gt;
  &lt;li&gt;No extra credit (sad day)&lt;/li&gt;
  &lt;li&gt;Late policy - If you don’t submit it by the due date, sucks to be you…&lt;/li&gt;
  &lt;li&gt;Only 3 exams, don’t believe hte syllabus&lt;/li&gt;
  &lt;li&gt;They’ll be on paper in class - don’t believe the syllabus…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;class-topics&quot;&gt;Class Topics&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Objective&lt;/th&gt;
      &lt;th&gt;Level of Familiarity&lt;/th&gt;
      &lt;th&gt;Evaluation Method&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Memory Hierarchy&lt;/td&gt;
      &lt;td&gt;Familiarity&lt;/td&gt;
      &lt;td&gt;Assignments, exams&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Virtual Memory&lt;/td&gt;
      &lt;td&gt;Master&lt;/td&gt;
      &lt;td&gt;Assignments Exams&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Storage and I/O topics&lt;/td&gt;
      &lt;td&gt;Mastery&lt;/td&gt;
      &lt;td&gt;Assignments Exams&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Multicore and Processors&lt;/td&gt;
      &lt;td&gt;Familiarity&lt;/td&gt;
      &lt;td&gt;Assignments Exams&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clusters&lt;/td&gt;
      &lt;td&gt;Mastery&lt;/td&gt;
      &lt;td&gt;Assignments Exams&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GPU Systems&lt;/td&gt;
      &lt;td&gt;familiarity&lt;/td&gt;
      &lt;td&gt;Assignments Exams&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;class-overview&quot;&gt;Class overview&lt;/h3&gt;
&lt;p&gt;|Overview|
|—|
|jave/C|
|Assembler|
|Mahine Language|
|1010011001010 (Binary)|
|PC Components|&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Clock cycle&lt;/strong&gt; - has an oscillator that links the processor to pull in instructions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Registers&lt;/strong&gt; - where we store and access data (RAM)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MIPS Assembly Language&lt;/strong&gt; - (not “millions of instructions per second”)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;pipelining&lt;/strong&gt; - Use the output of one program as the input of another&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;parralelism&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;hierarchy optimization&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-from-work&quot;&gt;Example from work&lt;/h3&gt;

&lt;p&gt;use a PCI card to pull analog data with digital sampling&lt;/p&gt;

&lt;p&gt;Basically, you need everything to be faster to make the whole computer faster. You can’t just have fast processor, you also need fast busses.&lt;/p&gt;

&lt;h3 id=&quot;abstractions&quot;&gt;Abstractions&lt;/h3&gt;

&lt;p&gt;Normally, you’ll write a program in c++/Java/C# (or whatever). This is an abstraction from what’s actually happening, because, in the end, it’s all just binary running through switches. However, you can encounter bugs when your abstract code gets compiled down to assembly.&lt;/p&gt;

&lt;h1 id=&quot;getting-into-the-book&quot;&gt;Getting into the book&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;reading assignment for this week - 1.8&lt;/li&gt;
  &lt;li&gt;page 11 talks about the ideas in computer architecture&lt;/li&gt;
  &lt;li&gt;make sure to look at the blue highlited points&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 11 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/11/USU-CS-3810.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/11/USU-CS-3810.html</guid>
        
        
      </item>
    
      <item>
        <title>USU - CHEM 1210 - In Class Notes</title>
        <description>&lt;p&gt;Today, we mostly talked about the syllabus (which you can checkout &lt;a href=&quot;https://usu.instructure.com/courses/393593/files/?preview=59642630&quot;&gt;here&lt;/a&gt;). And then started into content from the first chapter of the book.&lt;/p&gt;

&lt;h1 id=&quot;syllabus&quot;&gt;Syllabus&lt;/h1&gt;

&lt;p&gt;There are all the normal things - office hours, location, grading scale, and whatnot. But there’s also some super cool stuff about grading.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lowest score on exam gets dropped &lt;em&gt;(awesome!)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;There will most likely be an upward curve at the end of class &lt;em&gt;(also awesome)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;About 20% of the grade will come from online quizzes you get &lt;strong&gt;unlimited&lt;/strong&gt; attemps on.
    &lt;ul&gt;
      &lt;li&gt;Questions on the quiz will come from a question bank that he’ll most likely draw all the exam questions from and just change numbers. &lt;em&gt;(favorite)&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SI (supplemental instruction) on Tuesdays and Thursdays.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were the key things I noticed. If you saw anything else, email me (or maybe I’ll have comments set up by then)&lt;/p&gt;

&lt;h1 id=&quot;chapter-1-content&quot;&gt;Chapter 1 Content&lt;/h1&gt;

&lt;p&gt;All the material he covered is on the slides, which you can find &lt;a href=&quot;https://usu.instructure.com/courses/393593/files/folder/lecture%20material?preview=59641138&quot;&gt;here&lt;/a&gt;. I’ll just be adding my own notes and voice to things I thought were pertinent&lt;/p&gt;

&lt;h2 id=&quot;matter&quot;&gt;Matter&lt;/h2&gt;

&lt;p&gt;Matter can be composed from about 100 different elements&lt;/p&gt;

&lt;h2 id=&quot;states-of-matter&quot;&gt;States of matter&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Gas - no definite volume or shape&lt;/li&gt;
  &lt;li&gt;Liquid - definite volume, not shape &lt;strong&gt;(important, I saw this on the pre-quiz for chapter 1)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Solid - definite volume and shape&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pure-substances&quot;&gt;Pure substances&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;pure substances&lt;/strong&gt; have definite proportions of elements&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; water is &lt;script type=&quot;math/tex&quot;&gt;H_2O&lt;/script&gt; and will always have that same chamical makeup&lt;/p&gt;

&lt;h3 id=&quot;mixtures&quot;&gt;Mixtures&lt;/h3&gt;

&lt;p&gt;Mixtures have at least two substances and, unlike pure substances, will have different ratios of elements at different points.&lt;/p&gt;

&lt;p&gt;He used the example of pooring sugar into a bucket of water. Until the salt has been sifficiently mixed into the water, there will be varying quantities of salt and water.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; mixtures can be solids, gasses, or liquids - concrete, steel, clouds, etc&lt;/p&gt;

&lt;h3 id=&quot;homogeneous-vs-heterogeneous&quot;&gt;Homogeneous vs Heterogeneous&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hetero-: Prefix meaning different… The opposite of hetero- is homo-&lt;br /&gt;
Homo - Greek prefix meaning “the same”, opposite of “hetero-“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;mixtures can be homogeneous or heterogeneous&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;homogeneous: uniform composition - “get exactly the same thing no matter where you take a sample from”&lt;/li&gt;
  &lt;li&gt;heterogeneous: __non__uniform composition - “get different compositions at different places in sample.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Homogeneous:&lt;/em&gt;  steel, air, sugar solution&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Heterogeneous:&lt;/em&gt; cloud, rock, lumps of sugar at bottom of solution&lt;/p&gt;

&lt;h2 id=&quot;changes&quot;&gt;Changes&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Saw this on the prequiz too&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;physical
    &lt;ul&gt;
      &lt;li&gt;changes of state: melting, evaporation, etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;chemical
    &lt;ul&gt;
      &lt;li&gt;transformation into different substance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;units-of-measurement&quot;&gt;Units of Measurement&lt;/h2&gt;

&lt;p&gt;Professor Scheiner said we’ll strictly be working with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Metric_system&quot;&gt;metric&lt;/a&gt; system. So, that’s pretty much what the rest of the lecture was about.&lt;/p&gt;

&lt;p&gt;metric: 
SI Scale&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kg&lt;/li&gt;
  &lt;li&gt;m&lt;/li&gt;
  &lt;li&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;PhysicalQuantity&lt;/th&gt;
      &lt;th&gt;Name of Unit&lt;/th&gt;
      &lt;th&gt;Abbreviation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Mass&lt;/td&gt;
      &lt;td&gt;Kilogram&lt;/td&gt;
      &lt;td&gt;kf&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Length&lt;/td&gt;
      &lt;td&gt;Meter&lt;/td&gt;
      &lt;td&gt;m&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Time&lt;/td&gt;
      &lt;td&gt;Second&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;s^a&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Temerature&lt;/td&gt;
      &lt;td&gt;Kelvin&lt;/td&gt;
      &lt;td&gt;K&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Amount of substance&lt;/td&gt;
      &lt;td&gt;Mole&lt;/td&gt;
      &lt;td&gt;mol&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;meter is the basic&lt;/p&gt;

&lt;h3 id=&quot;measure-of-length&quot;&gt;measure of length&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;c = centi = &lt;script type=&quot;math/tex&quot;&gt;10^2&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;k = kilo = &lt;script type=&quot;math/tex&quot;&gt;10^3&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;M = mega = &lt;script type=&quot;math/tex&quot;&gt;10^6&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; = micro = &lt;script type=&quot;math/tex&quot;&gt;10^6&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;temerature&quot;&gt;Temerature&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; Celsius
    &lt;ul&gt;
      &lt;li&gt;freezes at &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; and boils at &lt;script type=&quot;math/tex&quot;&gt;100&lt;/script&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; Kelvin
    &lt;ul&gt;
      &lt;li&gt;freezes at 273 and boils at 373&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;volume-derived-unit&quot;&gt;Volume (derived unit)&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;length^3&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;cm^3 = mL&lt;/script&gt;

&lt;h3 id=&quot;uncertainty-in-measurement&quot;&gt;Uncertainty in Measurement&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Precision = mutual agreement&lt;/li&gt;
  &lt;li&gt;Accuracy = Closeness to true value&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;significant-figures&quot;&gt;Significant Figures&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Only write those figures whose value is truly known (plus one)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;the last digit is uncertain&lt;/p&gt;

</description>
        <pubDate>Mon, 11 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/11/USU-CHEM-1210-day-one.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/11/USU-CHEM-1210-day-one.html</guid>
        
        
      </item>
    
      <item>
        <title>Recursion</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;the repeated application of a recursive procedure or definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recursion is capable of being extremely powerful, while also being extremely simple. At the same time, you can break stuff, cause unexpected behavior, or increase the &lt;a href=&quot;http://www.adamtew.com/2016/01/04/How-To-Big-O.html&quot;&gt;complexity&lt;/a&gt; by oodles of noodles if you don’t follow some simple rules.&lt;/p&gt;

&lt;h2 id=&quot;the-base-cases&quot;&gt;The Base Case(s)&lt;/h2&gt;

&lt;p&gt;The first thing to understand when building a recursive function is that somehow, sometime, &lt;strong&gt;the function needs to stop&lt;/strong&gt;. The cause of this stop should be intentional and should &lt;strong&gt;always be possible&lt;/strong&gt;. If you never hit a &lt;em&gt;base case&lt;/em&gt;, then you’ll never stop, meaning you’ll run forever. This is bad. This is why we start with the base case.&lt;/p&gt;

&lt;p&gt;Sometimes there will be more than one base case. Say you want something to run until it finds a certain outcome. However, if that something doesn’t exist, you only want to run the function 10,000 or so times. This would give us two separate base cases.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if(x == target)return target;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if(count &amp;gt;= 10000)return &#39;data not found&#39;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The way recursion works is by using a function that repeatedly calls itself until it hits a base case. Each time the function calls itself it puts another instance of the function on the call stack, which requires more memory. This happens until you run out of memory and the application throws a stack overflow error.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A call stack is a data structure used by the program to store information about the active subroutines (like functions in C++ or methods in Java) in a program. - from &lt;a href=&quot;http://www.programmerinterview.com/index.php/recursion/explanation-of-recursion/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;always-return&quot;&gt;Always return&lt;/h2&gt;

&lt;p&gt;Something else to keep in mind is that your function should &lt;strong&gt;always return something&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Everytime a function calls itself, it sits there and waits for what was returned to come back up. If nothing comes back up, then the previous function can’t use the data that was collected.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This isn’t something to be concerned with if your function doesn’t return anything. For example, your recursive call was just changing settings on every element of a tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just rememeber to &lt;code&gt;return&lt;/code&gt; if you need access to the data later.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return x * factorial(x - 1);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;whos-recursing&quot;&gt;Who’s recursing?&lt;/h2&gt;

&lt;p&gt;When using recursion, it’s good to remember to take the smallest operation you can and then repeat it. It’s easy to make the mistake of trying to have the recursive function do &lt;em&gt;too much&lt;/em&gt; work. Sometimes, it’s better to have a helper function do the recursion for you, which return the required data.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
// c++
// inorder traversal to print the content of a tree

// public function called by a user
string toString()
{
    if(!isEmpty())return toString(root, &quot;\t&quot;);
    return &quot;There is nothing for you here, \nonly death...\n\n&quot;;
}

// private / protected helper function
string toString(Node * node, string indent)
{
    stringstream ss;
    if(node == nullptr)return &quot; &quot;;      // base case
    ss &amp;lt;&amp;lt; toString(node-&amp;gt;left, indent + &quot;\t&quot;);
    ss &amp;lt;&amp;lt; indent &amp;lt;&amp;lt; node-&amp;gt;element &amp;lt;&amp;lt; endl;
    ss &amp;lt;&amp;lt; toString(node-&amp;gt;right, indent + &quot;\t&quot;);
    return ss.str();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
// c++
// Delete a tree 

// public function called from a user
void makeEmpty()
{
    makeEmpty( root );
}

// private / protected function that gets called internally
// This is the helper function that actually does the recursion
void makeEmpty(Node * node)
{
    if(node != nullptr)             // base case
    {
        makeEmpty(node-&amp;gt;left);
        delete node;
        makeEmpty(node-&amp;gt;right);
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sat, 09 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/09/recursion.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/09/recursion.html</guid>
        
        
      </item>
    
      <item>
        <title>Data Structures</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;a data structure is a particular way of organizing data in a computer so that it can be used efficiently&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Data structures are at the core of everything computer scientists do. Understanding how to store, manipulate, sift, move, restructure, or whatever, data is essential when working with programs. Because every data structure operates a little differently, it’s important to know when to use what. A simple example in javascript is knowing when to use an array (list of variables) vs an object (key-value pair). Both are collections (data structures) but they operate in very different ways. Knowing what your options are and how they work can save you some headaches down the road.&lt;/p&gt;

&lt;h2 id=&quot;linked-list&quot;&gt;Linked List&lt;/h2&gt;

&lt;p&gt;A linked list is the most basic data structure you’ll come across in computer science. Under the hood, this is what your simple collections are made out of in most conventional languages.&lt;/p&gt;

&lt;p&gt;The way it works is with pointers. Essentially, you take an object and point its &lt;code&gt;next&lt;/code&gt; variables at another object of the same type. These objects are called &lt;strong&gt;nodes&lt;/strong&gt; and they can contain any type of data. if you wanted a list of &lt;code&gt;int&lt;/code&gt;s. your node would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class node 
{
  // the data
  int myNumber;

  // pointer to the next node
  node  *next;

  // constructor
  node( int value, node *next)
    : myNUmber{ value }, next{ next } { }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;a node doesn’t have to be a class, it could be a &lt;code&gt;struct&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You would then point &lt;code&gt;next&lt;/code&gt; to another &lt;code&gt;node&lt;/code&gt; object and there you have it, a linked list. Granted, you’ll rarely, if ever, see a linked list built like that. You’ll normally have another actual linked list class that can perform operations such as &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;delete()&lt;/code&gt;, &lt;code&gt;add()&lt;/code&gt; and so forth.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: You can have a linked list of any data type, including ones that you’ve made&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;doubly-linked-list&quot;&gt;Doubly Linked List&lt;/h3&gt;

&lt;p&gt;Most nodes in a linked list just have a pointer to their child. However, sometimes it’s more convenient to have a pointer back up to a parent node. A doubly linked list is a linked list where each node has a pointer to both it’s parent and child.&lt;/p&gt;

&lt;h3 id=&quot;circular-linked-list&quot;&gt;Circular Linked List&lt;/h3&gt;

&lt;p&gt;Usually, a linked list has a head and a tail. This makes it really easy to code things like traversals and deletes. Sometimes, though, it would be nice to go from the tail to the head. A &lt;strong&gt;circular linked list&lt;/strong&gt; does just that. It has a pointer from tail to head.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Usually, a cirular linked list will be a doubly linked list&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;trees&quot;&gt;Trees&lt;/h2&gt;

&lt;p&gt;Trees come in many different forms. Among the most common are the &lt;strong&gt;binary search tree&lt;/strong&gt;, &lt;strong&gt;AVL tree&lt;/strong&gt;, and the &lt;strong&gt;b+ tree&lt;/strong&gt;. Though the specifics are different, the basic form of a tree is a &lt;em&gt;root&lt;/em&gt; with pointers to two or more children. Each child also has pointers for two or more children.&lt;/p&gt;

&lt;h3 id=&quot;binary-search-tree&quot;&gt;Binary Search Tree&lt;/h3&gt;

&lt;p&gt;Binary search trees (BST) are among the simplest trees to write. Each node in a BST can have one or two children (left and right). What gives the tree its name is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_search_algorithm&quot;&gt;binary search algorithm&lt;/a&gt;. The tree is always in order. In its traditional form, the value of the left child is less than the value of the node, and the right child is greater. This makes it so that if you print the nodes with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_traversal&quot;&gt;inorder traversal&lt;/a&gt; you’ll see all the values in ascending order. This design makes it extremely easy to perform basic operations like &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;insert()&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt;. However, the complexity will differ depending on how &lt;em&gt;balanced&lt;/em&gt; the tree is.&lt;/p&gt;

&lt;h3 id=&quot;avl-tree&quot;&gt;AVL Tree&lt;/h3&gt;

&lt;p&gt;An AVL tree (named after it’s creators, Georgy Adelson-Velsky and Evgenii Landis’) has the same properties as a BST with some added optimizations. Since the complexity of keeping a tree perfectly balanced all the time would be far too expensive, the AVL tree uses various rotations whenever nodes are inserted or deleted to keep it &lt;em&gt;mostly&lt;/em&gt; balanced. This, combined with the fact that it’s sorted, gives it a surprising &lt;a href=&quot;http://www.adamtew.com/2016/01/04/How-To-Big-O.html&quot;&gt;O(logn)&lt;/a&gt; complexity for any of the standard &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;insert()&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt; operations.&lt;/p&gt;

&lt;h3 id=&quot;b-tree&quot;&gt;B+ Tree&lt;/h3&gt;

&lt;p&gt;The B+ tree veers from tradition a little bit. All data is stored in the leaves (nodes with no children). Every other node acts as a pointer to get to the leaves. B+ trees are also architected in a such a way that all of the leaves are at the same depth.&lt;/p&gt;

&lt;p&gt;B+ trees are generally used to house larger data types. The reason you might do this is if I/O is an issue and you want to maintain a conservative height to avoid storing data remotely.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/09/data-structures.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/09/data-structures.html</guid>
        
        
      </item>
    
      <item>
        <title>Connecting to the Redux Store</title>
        <description>&lt;p&gt;In the world of &lt;code&gt;react.js&lt;/code&gt;, it’s difficult to bring everything together. There’s just &lt;em&gt;too much stuff!&lt;/em&gt;. Terminology for dozens of new ideas you need mentallymapped to code can almost give you an aneurysm. In order to take advantage of app-wide state management, you need to understand the &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;flux architechture&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Redux is an implementation of the flux architecture. It’s a really light dependency that offers a handful of methods which are used to make an application stateful. The &lt;a href=&quot;http://rackt.org/redux/docs/introduction/index.html&quot;&gt;docs&lt;/a&gt; are a great resource for getting at the heart of redux.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Because of terminology, I’m going to use the word &lt;strong&gt;store&lt;/strong&gt; to describe the &lt;strong&gt;redux state&lt;/strong&gt; because I don’t want there to be confusion with the local state of a component&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In a nutshell, you have a &lt;code&gt;store&lt;/code&gt; that houses data. This store would holds information you want to persist beyond changing routes, so stuff like username. This data sits inside the store until you need it. It’s important to note that &lt;strong&gt;you must explicity retreive this data if you want it&lt;/strong&gt; via the &lt;code&gt;connect()&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;connect&quot;&gt;connect()&lt;/h2&gt;

&lt;p&gt;If the redux store were a river of data, flowing through your application, the connect function would be the water controller that routes the proverbial data into a given component. It changes a component from dumb to smart (more information on that &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.tcfx9ct67&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;By connecting a component to store data you are &lt;em&gt;subscribing&lt;/em&gt; to that data. This means a couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;That component will always have access to the current version of the given data&lt;/li&gt;
  &lt;li&gt;When the given data is updated your component will rerender&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;connect()&lt;/code&gt; lets you subscribe to as many objects in the store as you need. The way you manage this is through the first parameter of connect, &lt;code&gt;mapStateToProps(state)&lt;/code&gt;. There are other methods in connect, you can read about them &lt;a href=&quot;https://github.com/rackt/react-redux/blob/master/docs/api.md&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Rarely, if ever, should you subscribe to the whole store on a given component because this can hurt perfomance&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;mapstatetopropsstate&quot;&gt;mapStateToProps(state)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mapStateToProps&lt;/code&gt; hooks into the river of redux data and maps a given object on the store to an object on the local &lt;code&gt;this.props&lt;/code&gt;. The rest of redux needs to be setup already (reducers, actions, etc) but once that’s taken care of, you only need to call &lt;code&gt;connect&lt;/code&gt; and pass &lt;code&gt;mapStateToProps&lt;/code&gt; in as an argument to pull out redux data.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Here are some examples&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
// This maps the entire state to a component
// something you don&#39;t normally want to do
mapStateToProps(state) {
  return {
    state
  }
}

export default connect(mapStateToProps)(MyComponent)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// More ideal because you&#39;re only grabbing the object you need
mapStateToProps(state) {
  return {
    user: state.user
  }
}

export default connect(mapStateToProps)(MyComponent)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// A little bit cleaner with the es6 lambda syntax
export default connect(
  (state) =&amp;gt; ({
    user: state.user
  })
)(MyComponent)
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 08 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/08/redux-connect.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/08/redux-connect.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Regex</title>
        <description>
</description>
        <pubDate>Thu, 07 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/07/how-to-regex.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/07/how-to-regex.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Redux</title>
        <description>
</description>
        <pubDate>Thu, 07 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/07/how-to-redux.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/07/how-to-redux.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Big O</title>
        <description>&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Big O is a way to reason about the complexity of algorithms in computer science. There are many other methods, but big O is the most common that I’ve seen. Big O observes the theoretical limits of a given algorithm and generally ignores constants (because they’re generally not relevant in the big picture)&lt;/p&gt;

&lt;h2 id=&quot;complexities&quot;&gt;Complexities&lt;/h2&gt;

&lt;p&gt;These are The basic run time complexities you’ll see with big O:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Big O&lt;/th&gt;
      &lt;th&gt;Complexity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;Constant&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(logn)&lt;/td&gt;
      &lt;td&gt;slightly less than doubles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;doubles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(nlogn)&lt;/td&gt;
      &lt;td&gt;slightly more than doubles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n^2)&lt;/td&gt;
      &lt;td&gt;quadruples&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n^n)&lt;/td&gt;
      &lt;td&gt;Something really bad&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n!)&lt;/td&gt;
      &lt;td&gt;Something even worse&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each one is a theoretical limit of how long an algorithm will take to complete.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Take a traditional &lt;code&gt;for&lt;/code&gt; loop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
for(int i = 0; i &amp;lt; n; i++) {
  cout &amp;lt;&amp;lt; &quot;you&#39;ve reached &quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loop will iterate &lt;code&gt;n&lt;/code&gt; times, which is directly correlated to the size of the data set it’s analyzing. The constant &lt;code&gt;cout &amp;lt;&amp;lt; &quot;you&#39;ve reached &quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&lt;/code&gt; is less important the larger the data set. Because big O is a measure of the theoretical limit, the constant is ignored entirely, and the complexity we are concerned with becomes O(n) - which is read “order n”.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let’s observe a nested &lt;code&gt;for&lt;/code&gt; loop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
for (int i = 0; i &amp;lt; n; i++) {
  for (int j = 0; j &amp;lt; n; j++) {
    cout &amp;lt;&amp;lt; &quot;You&#39;ve reached &quot; &amp;lt;&amp;lt; (i + j) &amp;lt;&amp;lt; endl;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we see that a given data set will be iterated &lt;code&gt;n&lt;/code&gt; times for every item in the data set. This gives us a complexity of O(n^2), which, as you can imagine, is &lt;strong&gt;far worse&lt;/strong&gt; than the previous O(n) example and should be avoided unless absolutely necessary.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-recursion&quot;&gt;Analyzing Recursion&lt;/h2&gt;

&lt;p&gt;Big O gives us some really helpful insights on recursion. One big help is this theorem&lt;/p&gt;

&lt;p&gt;Assume T(n)=aT(n/b)+O(n^k) is the time for the function.
if a &amp;gt; b ^ k, the complexity is O(n^(log(ba))
if a = b ^ k, the complexity is O((n^k) logn)
if a &amp;lt; b ^ k, the complexity is O(n ^ k)&lt;/p&gt;

&lt;p&gt;Some rules to define are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a&lt;/code&gt; is the number of recursive calls we make within a function&lt;br /&gt;
&lt;code&gt;b&lt;/code&gt; is the number of pieces we divide the problem into&lt;br /&gt;
&lt;code&gt;k&lt;/code&gt; is the power of n work we do inside each call&lt;/p&gt;

&lt;p&gt;So, in lay mans terms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
void readCount(int count) 
{
  if(count &amp;lt;= 0)return;
	
  // the amount of work we did never made it to n, so k is 0
  cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;			

  // we make one recursive call, so a = 1
  // divides the work by 2, so b = 2
  return readCount(count / 2); 
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the above example we end up with&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a = 1&lt;/li&gt;
  &lt;li&gt;b = 2&lt;/li&gt;
  &lt;li&gt;k = 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;1 = 2^0 = O((n^0) logn)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So the complexity of our recursive call comes out to be &lt;code&gt;O(logn)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;another-example&quot;&gt;Another example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
void readStars(int stars)
{
  if(stars &amp;lt;= 0) return;
	
  for(int i = 0; i &amp;lt; stars; i++) count &amp;lt;&amp;lt; &quot; * &quot;; // k = 1
	
  return readStars(stars / 2) // a = 1, b = 2
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;a = 1&lt;/li&gt;
  &lt;li&gt;b = 2&lt;/li&gt;
  &lt;li&gt;k = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;1 &amp;lt; 2^1 = O(n^1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives us a complexity of &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;therefore&quot;&gt;Therefore&lt;/h2&gt;

&lt;p&gt;We can see that simple changes to our code can dramatically affect the run-time complexity. So it makes sense to be mindful of where we put loops, how often we iterate entire datasets, and especially how much we process during any recursion.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/04/How-To-Big-O.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/04/How-To-Big-O.html</guid>
        
        
      </item>
    
      <item>
        <title>Love You Grandma</title>
        <description>&lt;p&gt;My grandma, Afton Tew, passed away last week - &lt;a href=&quot;http://www.legacy.com/obituaries/hjnews/obituary.aspx?n=afton-tew&amp;amp;pid=177092980&amp;amp;fhid=6864&quot;&gt;Sunday Dec. 27 2015&lt;/a&gt; after 86 years of tremendous influence. She was a wonderful person that helped so many people.&lt;/p&gt;

&lt;p&gt;There was a wonderful service held in her honor. Many showed up to pay tribute. Her children spoke and sang songs. Grandchildren from across the country were there. It was, all-in-all, a wonderful service. Exactly how grandma would have liked it to be.&lt;/p&gt;

&lt;p&gt;I loved Afton Tew.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://adamtew.com/assets/images/afton.jpg&quot; alt=&quot;afton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nearly ten years ago, when I was a teenager, I had the opportunity to live with Grandma. Things were difficult at my home with parents and school, so I left and went to my grandma’s house. While there, she made it a point to help me in any way that she could. She found out foods I liked, would drive me to classes, tried to help me make friends, and helped me learn to play the piano.&lt;/p&gt;

&lt;p&gt;In later years, I didn’t have work, but she employed me to do yard work for her. This helped pay for my school until I got a job elsewhere.&lt;/p&gt;

&lt;p&gt;After getting married, my wife and I had a reception at her house and later lived in her basement apartment. We would often come up and talk with Grandma, help with her computer-related woes, rake leaves, shovel snow, and mow the lawn. We even had our first child while living there.&lt;/p&gt;

&lt;p&gt;Life won’t be the same without Grandma, but after decades without her husband, years of physical struggle and living alone, I know she’s in a better place.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/03/Love-you-grandma.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/03/Love-you-grandma.html</guid>
        
        
      </item>
    
  </channel>
</rss>
