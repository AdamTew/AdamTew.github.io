<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adam Tew</title>
    <description>Adam Tew
</description>
    <link>http://adamtew.com//</link>
    <atom:link href="http://adamtew.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 09 Jan 2016 15:09:50 -0700</pubDate>
    <lastBuildDate>Sat, 09 Jan 2016 15:09:50 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Recursion</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;the repeated application of a recursive procedure or definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recursion is capable of being extremely powerful, while also being extremely simple. At the same time, you can break stuff, cause unexpected behavior, or increase the &lt;a href=&quot;http://www.adamtew.com/2016/01/04/How-To-Big-O.html&quot;&gt;complexity&lt;/a&gt; by oodles of noodles if you don’t follow some simple rules&lt;/p&gt;

&lt;h2 id=&quot;the-base-cases&quot;&gt;The Base Case(s)&lt;/h2&gt;

&lt;p&gt;The first thing to understand when building a recursive function is that somehow, sometime, &lt;strong&gt;the function needs to stop&lt;/strong&gt;. The cause of this stop should be intentional and should &lt;strong&gt;always be possible&lt;/strong&gt;. If you never hit a &lt;em&gt;base case&lt;/em&gt; then you’ll never stop, meaning you’ll run forever. This is bad. This is why we start with the base case.&lt;/p&gt;

&lt;p&gt;Sometimes there will be more than one base case. Say you want something to run until it finds a certain outcome. However, if that something doesn’t exist, you only want to run the function 10,000 or so times. This would give us two separate base cases.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if(x == target)return target;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if(count &amp;gt;= 10000)return &#39;data not found&#39;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The way recursion works is by using a function that repeatedly calls itself until it hits a base case. Each time the function calls itself it puts another instance of the function on the call stack, which requires more memory. This happens until you run out of memory and the application throws a stack overflow error.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A call stack is a data structure used by the program to store information about the active subroutines (like functions in C++ or methods in Java) in a program. - from &lt;a href=&quot;http://www.programmerinterview.com/index.php/recursion/explanation-of-recursion/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;always-return&quot;&gt;Always return&lt;/h2&gt;

&lt;p&gt;Something else to keep in mind is that your function should &lt;strong&gt;always return something&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Everytime that a function calls itself, it sits there and waits for what was returned to come back up. If nothing comes back up, then the previous function can’t use the data that was collected.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This isn’t something to be concerned with if your function doesn’t returning anything. For example, if your recursive call was just changing settings on every element of a tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just rememeber to &lt;code&gt;return&lt;/code&gt; if you need access to the data later.&lt;/p&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return x * factorial(x - 1);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;whos-recursing&quot;&gt;Who’s recursing?&lt;/h2&gt;

&lt;p&gt;When using recursion, it’s good to remember that you want to take the smallest operation you can and then repeat it. It’s easy to make the mistake of trying to have the recursive function do &lt;em&gt;too much&lt;/em&gt; work. Sometimes, it’s better to have a helper function do the recursion for you, which return the required data.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
// c++
// inorder traversal to print the content of a tree

// public function called by a user
string toString()
{
    if(!isEmpty())return toString(root, &quot;\t&quot;);
    return &quot;There is nothing for you here, \nonly death...\n\n&quot;;
}

// private / protected helper function
string toString(Node * node, string indent)
{
    stringstream ss;
    if(node == nullptr)return &quot; &quot;;      // base case
    ss &amp;lt;&amp;lt; toString(node-&amp;gt;left, indent + &quot;\t&quot;);
    ss &amp;lt;&amp;lt; indent &amp;lt;&amp;lt; node-&amp;gt;element &amp;lt;&amp;lt; endl;
    ss &amp;lt;&amp;lt; toString(node-&amp;gt;right, indent + &quot;\t&quot;);
    return ss.str();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
// c++
// Delete a tree 

// public function called from a user
void makeEmpty()
{
    makeEmpty( root );
}

// private / protected function that gets called internally
// This is the helper function that actually does the recursion
void makeEmpty(Node * node)
{
    if(node != nullptr)             // base case
    {
        makeEmpty(node-&amp;gt;left);
        delete node;
        makeEmpty(node-&amp;gt;right);
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sat, 09 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/09/recursion.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/09/recursion.html</guid>
        
        
      </item>
    
      <item>
        <title>Data Structures</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;a data structure is a particular way of organizing data in a computer so that it can be used efficiently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Data structures are at the core of everything computer scientists do. Understanding how to store, mwanipulate, sift, move, restructure (you name it) data is essential when working with programs. Because every data structure operates a little different, it’s important to know when to use what. A simple example in javascript is knowing when to use an array (list of variables) vs an object (key-value pair). Both are collections (data structures) but they operate in vrey different ways. Knowing what your options are and how they work can save you some headaches down the road.&lt;/p&gt;

&lt;h2 id=&quot;linked-list&quot;&gt;Linked List&lt;/h2&gt;

&lt;p&gt;A linked list is the most basic data structure you’ll come across in computer science. Under the hood, this is (most likely) what your simple collections are made out of in conventional languages.&lt;/p&gt;

&lt;p&gt;The way it works is with pointers. Essentially, you take an object and point its &lt;code&gt;next&lt;/code&gt; variables at another object of the same type. These objects are called &lt;strong&gt;nodes&lt;/strong&gt; and they can contain any type of data. if you wanted a list of &lt;code&gt;int&lt;/code&gt;s. your node would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class node 
{
  // the data
  int myNumber;

  // pointer to the next node
  node  *next;

  // constructor
  node( int value, node *next)
    : myNUmber{ value }, next{ next } { }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;a node doesn’t have to be it’s own class, it could be a &lt;code&gt;struct&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;you would then point &lt;code&gt;next&lt;/code&gt; to another &lt;code&gt;node&lt;/code&gt; object and there you have it, a linked list. Granted, you’ll have to build out things 
You can, in fact, have linked lists of other data structures.&lt;/p&gt;

&lt;h3 id=&quot;double-linked-list&quot;&gt;Double Linked List&lt;/h3&gt;

&lt;h2 id=&quot;trees&quot;&gt;Trees&lt;/h2&gt;

&lt;h2 id=&quot;heaps&quot;&gt;Heaps&lt;/h2&gt;

&lt;h2 id=&quot;union-find&quot;&gt;Union Find&lt;/h2&gt;

&lt;h2 id=&quot;graphs&quot;&gt;Graphs&lt;/h2&gt;
</description>
        <pubDate>Sat, 09 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/09/data-structures.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/09/data-structures.html</guid>
        
        
      </item>
    
      <item>
        <title>Connecting to the Redux Store</title>
        <description>&lt;p&gt;In the world of &lt;code&gt;react.js&lt;/code&gt;, it’s difficult to bring everything together. There’s just &lt;em&gt;too much stuff!&lt;/em&gt;. Terminology for dozens of new ideas you need mentallymapped to code can almost give you an aneurysm. In order to take advantage of app-wide state management, you need to understand the &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;flux architechture&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Redux is an implementation of the flux architecture. It’s a really light dependency that offers a handful of methods which are used to make an application stateful. The &lt;a href=&quot;http://rackt.org/redux/docs/introduction/index.html&quot;&gt;docs&lt;/a&gt; are a great resource for getting at the heart of redux.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Because of terminology, I’m going to use the word &lt;strong&gt;store&lt;/strong&gt; to describe the &lt;strong&gt;redux state&lt;/strong&gt; because I don’t want there to be confusion with the local state of a component&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In a nutshell, you have a &lt;code&gt;store&lt;/code&gt; that houses data. This store would holds information you want to persist beyond changing routes, so stuff like username. This data sits inside the store until you need it. It’s important to note that &lt;strong&gt;you must explicity retreive this data if you want it&lt;/strong&gt; via the &lt;code&gt;connect()&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;connect&quot;&gt;connect()&lt;/h2&gt;

&lt;p&gt;If the redux store were a river of data, flowing through your application, the connect function would be the water controller that routes the proverbial data into a given component. It changes a component from dumb to smart (more information on that &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.tcfx9ct67&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;By connecting a component to store data you are &lt;em&gt;subscribing&lt;/em&gt; to that data. This means a couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;That component will always have access to the current version of the given data&lt;/li&gt;
  &lt;li&gt;When the given data is updated your component will rerender&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;connect()&lt;/code&gt; lets you subscribe to as many objects in the store as you need. The way you manage this is through the first parameter of connect, &lt;code&gt;mapStateToProps(state)&lt;/code&gt;. There are other methods in connect, you can read about them &lt;a href=&quot;https://github.com/rackt/react-redux/blob/master/docs/api.md&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Rarely, if ever, should you subscribe to the whole store on a given component because this can hurt perfomance&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;mapstatetopropsstate&quot;&gt;mapStateToProps(state)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mapStateToProps&lt;/code&gt; hooks into the river of redux data and maps a given object on the store to an object on the local &lt;code&gt;this.props&lt;/code&gt;. The rest of redux needs to be setup already (reducers, actions, etc) but once that’s taken care of, you only need to call &lt;code&gt;connect&lt;/code&gt; and pass &lt;code&gt;mapStateToProps&lt;/code&gt; in as an argument to pull out redux data.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Here are some examples&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
// This maps the entire state to a component
// something you don&#39;t normally want to do
mapStateToProps(state) {
  return {
    state
  }
}

export default connect(mapStateToProps)(MyComponent)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// More ideal because you&#39;re only grabbing the object you need
mapStateToProps(state) {
  return {
    user: state.user
  }
}

export default connect(mapStateToProps)(MyComponent)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// A little bit cleaner with the es6 lambda syntax
export default connect(
  (state) =&amp;gt; ({
    user: state.user
  })
)(MyComponent)
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 08 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/08/redux-connect.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/08/redux-connect.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Regex</title>
        <description>
</description>
        <pubDate>Thu, 07 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/07/how-to-regex.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/07/how-to-regex.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Redux</title>
        <description>
</description>
        <pubDate>Thu, 07 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/07/how-to-redux.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/07/how-to-redux.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Big O</title>
        <description>&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Big O is a way to reason about the complexity of algorithms in computer science. There are many other methods, but big O is the most common that I’ve seen. Big O observes the theoretical limits of a given algorithm and generally ignores constants (because they’re generally not relevant in the big picture)&lt;/p&gt;

&lt;h2 id=&quot;complexities&quot;&gt;Complexities&lt;/h2&gt;

&lt;p&gt;These are The basic run time complexities you’ll see with big O:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Big O&lt;/th&gt;
      &lt;th&gt;Complexity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;Constant&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(logn)&lt;/td&gt;
      &lt;td&gt;slightly less than doubles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;doubles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(nlogn)&lt;/td&gt;
      &lt;td&gt;slightly more than doubles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n^2)&lt;/td&gt;
      &lt;td&gt;quadruples&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n^n)&lt;/td&gt;
      &lt;td&gt;Something really bad&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n!)&lt;/td&gt;
      &lt;td&gt;Something even worse&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each one is a theoretical limit of how long an algorithm will take to complete.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Take a traditional &lt;code&gt;for&lt;/code&gt; loop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
for(int i = 0; i &amp;lt; n; i++) {
  cout &amp;lt;&amp;lt; &quot;you&#39;ve reached &quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loop will iterate &lt;code&gt;n&lt;/code&gt; times, which is directly correlated to the size of the data set it’s analyzing. The constant &lt;code&gt;cout &amp;lt;&amp;lt; &quot;you&#39;ve reached &quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&lt;/code&gt; is less important the larger the data set. Because big O is a measure of the theoretical limit, the constant is ignored entirely, and the complexity we are concerned with becomes O(n) - which is read “order n”.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let’s observe a nested &lt;code&gt;for&lt;/code&gt; loop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
for (int i = 0; i &amp;lt; n; i++) {
  for (int j = 0; j &amp;lt; n; j++) {
    cout &amp;lt;&amp;lt; &quot;You&#39;ve reached &quot; &amp;lt;&amp;lt; (i + j) &amp;lt;&amp;lt; endl;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we see that a given data set will be iterated &lt;code&gt;n&lt;/code&gt; times for every item in the data set. This gives us a complexity of O(n^2), which, as you can imagine, is &lt;strong&gt;far worse&lt;/strong&gt; than the previous O(n) example and should be avoided unless absolutely necessary.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-recursion&quot;&gt;Analyzing Recursion&lt;/h2&gt;

&lt;p&gt;Big O gives us some really helpful insights on recursion. One big help is this theorem&lt;/p&gt;

&lt;p&gt;Assume T(n)=aT(n/b)+O(n^k) is the time for the function.
if a &amp;gt; b ^ k, the complexity is O(n^(log(ba))
if a = b ^ k, the complexity is O((n^k) logn)
if a &amp;lt; b ^ k, the complexity is O(n ^ k)&lt;/p&gt;

&lt;p&gt;Some rules to define are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a&lt;/code&gt; is the number of recursive calls we make within a function&lt;br /&gt;
&lt;code&gt;b&lt;/code&gt; is the number of pieces we divide the problem into&lt;br /&gt;
&lt;code&gt;k&lt;/code&gt; is the power of n work we do inside each call&lt;/p&gt;

&lt;p&gt;So, in lay mans terms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
void readCount(int count) 
{
  if(count &amp;lt;= 0)return;
	
  // the amount of work we did never made it to n, so k is 0
  cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;			

  // we make one recursive call, so a = 1
  // divides the work by 2, so b = 2
  return readCount(count / 2); 
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the above example we end up with&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a = 1&lt;/li&gt;
  &lt;li&gt;b = 2&lt;/li&gt;
  &lt;li&gt;k = 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;1 = 2^0 = O((n^0) logn)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So the complexity of our recursive call comes out to be &lt;code&gt;O(logn)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;another-example&quot;&gt;Another example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
void readStars(int stars)
{
  if(stars &amp;lt;= 0) return;
	
  for(int i = 0; i &amp;lt; stars; i++) count &amp;lt;&amp;lt; &quot; * &quot;; // k = 1
	
  return readStars(stars / 2) // a = 1, b = 2
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;a = 1&lt;/li&gt;
  &lt;li&gt;b = 2&lt;/li&gt;
  &lt;li&gt;k = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;1 &amp;lt; 2^1 = O(n^1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives us a complexity of &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;therefore&quot;&gt;Therefore&lt;/h2&gt;

&lt;p&gt;We can see that simple changes to our code can dramatically affect the run-time complexity. So it makes sense to be mindful of where we put loops, how often we iterate entire datasets, and especially how much we process during any recursion.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/04/How-To-Big-O.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/04/How-To-Big-O.html</guid>
        
        
      </item>
    
      <item>
        <title>Love You Grandma</title>
        <description>&lt;p&gt;My grandma, Afton Tew, passed away last week - &lt;a href=&quot;http://www.legacy.com/obituaries/hjnews/obituary.aspx?n=afton-tew&amp;amp;pid=177092980&amp;amp;fhid=6864&quot;&gt;Sunday Dec. 27 2015&lt;/a&gt; after 86 years of tremendous influence. She was a wonderful person that helped so many people.&lt;/p&gt;

&lt;p&gt;There was a wonderful service held in her honor. Many showed up to pay tribute. Her children spoke and sang songs. Grandchildren from across the country were there. It was, all-in-all, a wonderful service. Exactly how grandma would have liked it to be.&lt;/p&gt;

&lt;p&gt;I loved Afton Tew.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://adamtew.com/assets/images/afton.jpg&quot; alt=&quot;afton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nearly ten years ago, when I was a teenager, I had the opportunity to live with Grandma. Things were difficult at my home with parents and school, so I left and went to my grandma’s house. While there, she made it a point to help me in any way that she could. She found out foods I liked, would drive me to classes, tried to help me make friends, and helped me learn to play the piano.&lt;/p&gt;

&lt;p&gt;In later years, I didn’t have work, but she employed me to do yard work for her. This helped pay for my school until I got a job elsewhere.&lt;/p&gt;

&lt;p&gt;After getting married, my wife and I had a reception at her house and later lived in her basement apartment. We would often come up and talk with Grandma, help with her computer-related woes, rake leaves, shovel snow, and mow the lawn. We even had our first child while living there.&lt;/p&gt;

&lt;p&gt;Life won’t be the same without Grandma, but after decades without her husband, years of physical struggle and living alone, I know she’s in a better place.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/03/Love-you-grandma.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/03/Love-you-grandma.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Sublime</title>
        <description>&lt;p&gt;Sublime is awesome. As a text editor. When trying to debug code, I generally tend to use an IDE with break points (anything IntelliJ, CLion, PyCharm, etc). However, when it comes to just editing text, I haven’t found anything that can rival Sublime (note, I haven’t tried &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; yet, but it feels like it was built with a lot of the same ideas in mind).&lt;/p&gt;

&lt;h2 id=&quot;multiple-cursors&quot;&gt;Multiple Cursors&lt;/h2&gt;

&lt;p&gt;I cannot express how useful multiple cursors is. When altering multiple instances of the same (or similar) content, this comes in quite handy. just highlight some text and hit &lt;strong&gt;⌘ + d&lt;/strong&gt;. Sublime will select the next instance of the given text with a new cursor. This can be repeated until there are no instances on the page. Often times I’ll use this approach as a quick search for additional references to a given variable, changing things like single quotes &lt;code&gt;&#39;&lt;/code&gt; to double quotes &lt;code&gt;&quot;&lt;/code&gt;, parethesis &lt;code&gt;(&lt;/code&gt; to braces &lt;code&gt;{&lt;/code&gt;, or underscores &lt;code&gt;_&lt;/code&gt; ro dashes &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another method is with searching. You can toggle the search bar (⌘ + f), type in a search term, and hit find all (option + r). This will instantly grab all of the instances of a given term and create cursors. I generally use this when I want to delete every instance of a term, or modify it slightly.&lt;/p&gt;

&lt;p&gt;The third method, that I’ve started using more recently is with ⌘ + shift + l. It will take all of the highlighted text and break every line into its own cursor. I generally use this when I don’t have a common reference point. Say you want to put tags around 20 different pieces of text. Because text is very similar, there’s not really anything to ⌘ + d or search. So, I’ll just highlight the whole block of variables, hit ⌘ + shift + l, and away we go.&lt;/p&gt;

&lt;p&gt;Pretty nifty.&lt;/p&gt;

&lt;h2 id=&quot;vim-integration&quot;&gt;vim integration&lt;/h2&gt;

&lt;p&gt;Even though PyCharm, CLion, and Visual Studio have their perks, I’ve never found anything with as good vim integration as sublime. All you need to do to enable it is change &lt;code&gt;vintage mode&lt;/code&gt; in the user preference to enabled, and then away you go.&lt;/p&gt;

&lt;p&gt;Once vintage mode is enabled, you get a command mode (entered via &lt;code&gt;esc&lt;/code&gt;) where you can run most of the traditional vi(m) commands&lt;/p&gt;

&lt;h3 id=&quot;basic-navigation&quot;&gt;basic navigation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;h&lt;/code&gt; &lt;code&gt;j&lt;/code&gt; &lt;code&gt;k&lt;/code&gt; &lt;code&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;insertion&quot;&gt;Insertion&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;a&lt;/code&gt; and &lt;code&gt;⇧ a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i&lt;/code&gt; and &lt;code&gt;⇧i&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;⇧ o&lt;/code&gt; and &lt;code&gt;o&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jumping-around-the-page&quot;&gt;Jumping around the page&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;⇧ h&lt;/code&gt; &lt;code&gt;⇧ m&lt;/code&gt; &lt;code&gt;⇧ l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;advanced-navigation&quot;&gt;advanced navigation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;e&lt;/code&gt; &lt;code&gt;f&lt;/code&gt; &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$&lt;/code&gt; &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;highlighting--copying&quot;&gt;highlighting / copying&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;v&lt;/code&gt; &lt;code&gt;y&lt;/code&gt; &lt;code&gt;d&lt;/code&gt; &lt;code&gt;p&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;plugins-for-everything&quot;&gt;plugins for everything&lt;/h2&gt;

&lt;p&gt;Need syntax highlighting for… Any language? Gotcha covered - &lt;code&gt;⇧⌘p&lt;/code&gt; brings up a list of things you can do.&lt;/p&gt;

&lt;h2 id=&quot;projects&quot;&gt;Projects&lt;/h2&gt;

&lt;p&gt;Project are extremely useful if you have, well, lots of projects that you’re working on. I do a lot of contract work / school / personal fun projects, so it’s good for me.&lt;/p&gt;

&lt;p&gt;The way it works:&lt;/p&gt;

&lt;p&gt;Project &amp;gt; add folder to project&lt;/p&gt;

&lt;h2 id=&quot;p-ctrl--p&quot;&gt;⌘ + p (ctrl + p)&lt;/h2&gt;

&lt;p&gt;This one is at the bottom of the list because I don’t use it that often. I know lots of people that do, but I have this weird mental thing about knowing where every file is (I tend to use it a lot more on bigger projects where I don’t want to navigate through piles of directories)&lt;/p&gt;

</description>
        <pubDate>Sat, 02 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/02/How-to-Sublime.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/02/How-to-Sublime.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Markdown</title>
        <description>&lt;h2 id=&quot;hr&quot;&gt;&lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;header&quot;&gt;Header&lt;/h2&gt;

&lt;h6 id=&quot;header-6&quot;&gt;header 6&lt;/h6&gt;

&lt;h5 id=&quot;header-5&quot;&gt;header 5&lt;/h5&gt;

&lt;h4 id=&quot;header-4&quot;&gt;header 4&lt;/h4&gt;

&lt;h3 id=&quot;header-3&quot;&gt;header 3&lt;/h3&gt;

&lt;h2 id=&quot;header-2&quot;&gt;header 2&lt;/h2&gt;

&lt;h1 id=&quot;header-1&quot;&gt;header 1&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;# header 1
## header 2
### header 3
#### header 4
##### header 5
###### header 6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;bulleted&lt;/li&gt;
  &lt;li&gt;list
    &lt;ul&gt;
      &lt;li&gt;with&lt;/li&gt;
      &lt;li&gt;indentation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;or not&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;- bulleted
- list
    + with 
    + indentation
- or not&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th&gt;Subtopic&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Topic&lt;/td&gt;
      &lt;td&gt;Subtopic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Subtopic&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;|Topic|Subtopic|
|---|---|
|Topic  |Subtopic|
|       |Subtopic|&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 02 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://adamtew.com//2016/01/02/How-to-Markdown.html</link>
        <guid isPermaLink="true">http://adamtew.com//2016/01/02/How-to-Markdown.html</guid>
        
        
      </item>
    
  </channel>
</rss>
